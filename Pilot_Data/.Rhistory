c(seq(60, round(
tail(preAdapt$rt, n = 1), digits = -2
), by = 60))
if (tail(preAdapt$rt, n = 1) > tail(timePoints,n=1)){
newVal <-tail(timePoints,n=1)+60
timePoints<-append(timePoints,newVal)
}
subject <-
as.vector(matrix(subjects[k], nrow = length(timePoints)))
phase <-
as.vector(matrix('preAdapt', nrow = length(timePoints)))
#create new dataframe
pctEyePre <-
data.frame(subject, phase, timePoints, pct_be, pct_nbe, pct_mix)
}
if (length(preAdapt$subject)!=0) {
occurrencePre <- replicate(length(preAdapt$rivDir), 0)
for (i in 1:length(preAdapt$rt)) {
occurrencePre[i] = preAdapt$rt[i + 1] - preAdapt$rt[i]
if (i == length(preAdapt$rt)) {
occurrencePre[i] = round(preAdapt$rt[i], digits = -2) - preAdapt$rt[i]
}
}
preAdapt$durationOnEye <- occurrencePre
#get porportion of time spent on each eye every minute
all <-
c(seq(0, round(
tail(preAdapt$rt, n = 1), digits = -2
), by = 60))
if (tail(preAdapt$rt, n = 1) > tail(all,n=1)){
newVal <-tail(all,n=1)+60
all<-append(all,newVal)
}
preAdapt <- subset(preAdapt, rt < 600)
beTrack = replicate(length(all) - 1, 0)
pct_be = replicate(length(all) - 1, 0)
nbeTrack = replicate(length(all) - 1, 0)
pct_nbe = replicate(length(all) - 1, 0)
mixTrack = replicate(length(all) - 1, 0)
pct_mix = replicate(length(all) - 1, 0)
for (j in 1:(length(preAdapt$rt))) {
for (i in 1:length(all))
{
if (preAdapt$rt[j] >= all[i] &
preAdapt$rt[j] < all[i + 1])
{
if (preAdapt$rivDir[j] == "blurryEye")
{
beTrack[i] <- beTrack[i] + preAdapt$durationOnEye[j]
pct_be[i] <- beTrack[i] / 60
}
else if (preAdapt$rivDir[j] == "nonBlurryEye")
{
nbeTrack[i] <- nbeTrack[i] + preAdapt$durationOnEye[j]
pct_nbe[i] <- nbeTrack[i] / 60
}
else if (preAdapt$rivDir[j] == "mix")
{
mixTrack[i] <- mixTrack[i] + preAdapt$durationOnEye[j]
pct_mix[i] <- mixTrack[i] / 60
}
}
}
}
timePoints <-
c(seq(60, round(
tail(preAdapt$rt, n = 1), digits = -2
), by = 60))
if (tail(preAdapt$rt, n = 1) > tail(timePoints,n=1)){
newVal <-tail(timePoints,n=1)+60
timePoints<-append(timePoints,newVal)
}
subject <-
as.vector(matrix(subjects[k], nrow = length(timePoints)))
phase <-
as.vector(matrix('preAdapt', nrow = length(timePoints)))
#create new dataframe
pctEyePre <-
data.frame(subject, phase, timePoints, pct_be, pct_nbe, pct_mix)
}
#repeat for postAdaptation data
if (length(postAdapt$subject)!=0) {
occurrencePost <- replicate(length(postAdapt$rivDir), 0)
for (i in 1:length(postAdapt$rt)) {
occurrencePost[i] = postAdapt$rt[i + 1] - postAdapt$rt[i]
if (i == length(postAdapt$rt)) {
occurrencePost[i] = round(postAdapt$rt[i], digits = -2) - postAdapt$rt[i]
}
}
postAdapt$durationOnEye <- occurrencePost
#get porportion of time spent on each eye every minute
all <-
c(seq(0, round(
tail(postAdapt$rt, n = 1), digits = -2
), by = 60))
postAdapt <- subset(postAdapt, rt < 600)
if (tail(postAdapt$rt, n = 1) > tail(all,n=1)){
newVal <-tail(all,n=1)+60
all<-append(all,newVal)
}
beTrackPost = replicate(length(all) - 1, 0)
pct_bePost = replicate(length(all) - 1, 0)
nbeTrackPost = replicate(length(all) - 1, 0)
pct_nbePost = replicate(length(all) - 1, 0)
mixTrackPost = replicate(length(all) - 1, 0)
pct_mixPost = replicate(length(all) - 1, 0)
postAdapt <- subset(postAdapt, rt < 600)
for (j in 1:(length(postAdapt$rt))) {
for (i in 1:length(all))
{
if (postAdapt$rt[j] >= all[i] &
postAdapt$rt[j] < all[i + 1])
{
if (postAdapt$rivDir[j] == "blurryEye")
{
beTrackPost[i] <- beTrackPost[i] + postAdapt$durationOnEye[j]
pct_bePost[i] <- beTrackPost[i] / 60
}
else if (postAdapt$rivDir[j] == "nonBlurryEye")
{
nbeTrackPost[i] <- nbeTrackPost[i] + postAdapt$durationOnEye[j]
pct_nbePost[i] <- nbeTrackPost[i] / 60
}
else if (postAdapt$rivDir[j] == "mix")
{
mixTrackPost[i] <- mixTrackPost[i] + postAdapt$durationOnEye[j]
pct_mixPost[i] <- mixTrackPost[i] / 60
}
}
}
}
timePoints <-
c(seq(60, round(
tail(postAdapt$rt, n = 1), digits = -2
), by = 60))
if (tail(postAdapt$rt, n = 1) > tail(timePoints,n=1)){
newVal <-tail(timePoints,n=1)+60
timePoints<-append(timePoints,newVal)
}
subject <-
as.vector(matrix(subjects[k], nrow = length(timePoints)))
phase <-
as.vector(matrix('postAdapt', nrow = length(timePoints)))
#create new dataframe
pctEyePost <-
data.frame(subject,
phase,
timePoints,
pct_bePost,
pct_nbePost,
pct_mixPost)
colnames(pctEyePost) <-
c("subject",
"phase",
"timePoints",
"pct_be",
"pct_nbe",
"pct_mix")
}
if ((exists("pctEyePre")) & (exists("pctEyePost"))){
preXpostTimePoints <- rbind(pctEyePre, pctEyePost)
preXpostAdapt <- rbind(preAdapt, postAdapt)
}
if ((exists("pctEyePre")) & (exists("pctEyePost"))){
preXpostTimePoints <- rbind(pctEyePre, pctEyePost)
preXpostAdapt <- rbind(preAdapt, postAdapt)
}
if (exists("pctEyePre")) {
preXpostTimePoints <- pctEyePre
preXpostAdapt <- preAdapt
}else if (exists("pctEyePost")) {
preXpostTimePoints <- pctEyePost
preXpostAdapt <- postAdapt
}
write.csv(preXpostAdapt, paste0('preXpostAdapt_', subjects[k], '.csv'))
write.csv(preXpostTimePoints,
paste0('preXpostTimePoints_', subjects[k], '.csv'))
#### process truck task data ####
files<- as.character(c("matFiles/AdaptationDiplopiaDat_Sub001_practice_day1_25-Feb-2020_12-27-18.mat", #could the file be corrupted?? crashing r
"matFiles/AdaptationDiplopiaDat_Sub001_practice_day2_blur_26-Feb-2020_12-20-01.mat",
#"matFiles/AdaptationDiplopiaDat_Sub001_practice_day2_noBlur_26-Feb-2020_11-43-55.mat",
"matFiles/AdaptationDiplopiaDat_Sub001_day3_27-Feb-2020_16-18-16.mat",
"matFiles/AdaptationDiplopiaDat_Sub001_day4_28-Feb-2020_17-38-55.mat",
"matFiles/AdaptationDiplopiaDat_sub002_practice_day1_modified_02-Mar-2020_12-03-43.mat"
))
subjects<- c("Sub001_day1","Sub001_day2",
#"Sub001_day2noBlur",
"Sub001_day3","Sub001_day4",
"Sub002_day1")
for (k in 2:length(files)) {
#read in data and variables
dat <- read.mat(files[k])
if (length(dat$allRivtimesPre) !=0) {
rtPre<- -(dat$allRivtimesPre[1] - dat$allRivtimesPre)
butPressPre <- dat$allrivkeysPre
truckDirPre <- dat$alltrueDirectionPre
depEyePre <-
as.numeric(matrix(dat$exp$depeye, nrow = length(truckDirPre)))
subjectPre <-
as.vector(matrix(subjects[k], nrow = length(truckDirPre)))
preAdapt <-
data.frame(subjectPre,
rtPre,
butPressPre,
truckDirPre,
depEyePre)
preAdapt <- subset(preAdapt, rtPre <= 600)
preAdapt$phase <-
as.vector(matrix('preAdapt', nrow = length(preAdapt$rtPre)))
colnames(preAdapt) <-
c(
"subject",
"rt",
"butPress",
"truckDir",
"depEye",
"phase"
)
}
if (length(dat$allRivtimesPost)!=0) {
rtPost<- -(dat$allRivtimesPost[1] - dat$allRivtimesPost)
butPressPost <- dat$allrivkeysPost
truckDirPost <- dat$alltrueDirectionPost
depEyePost <-
as.numeric(matrix(dat$exp$depeye, nrow = length(truckDirPost)))
subjectPost <-
as.vector(matrix(subjects[k], nrow = length(truckDirPost)))
#combine postAdapt into a dataframe
postAdapt <-
data.frame(
subjectPost,
rtPost,
butPressPost,
truckDirPost,
depEyePost
)
postAdapt$phase <-
as.vector(matrix('postAdapt', nrow = length(postAdapt$rtPost)))
colnames(postAdapt) <-
c(
"subject",
"rt",
"butPress",
"truckDir",
"depEye",
"phase"
)
}
if ((exists("preAdapt")) & (exists("postAdapt"))){
preXpostAdapt <- rbind(preAdapt, postAdapt)
}
if (exists("preAdapt")) {
preXpostAdapt <- preAdapt
} else if (exists("postAdapt")){
preXpostAdapt <- postAdapt
}
## decode nonBlurry and blurry eye
#explore binocular rivalry
leftDir <- subset(preXpostAdapt, butPress == 1)
rightDir <- subset(preXpostAdapt, butPress == 2)
#decode when seeing mixture
mixDir <- subset(preXpostAdapt, butPress == 3)
mixDir$rivDir <-
as.factor(as.vector(matrix("mix", nrow = length(mixDir$subject))))
#decode when seeing normal eye
leftDirxTrueL <- subset(leftDir, truckDir == 1)
rightDirxTrueR <- subset(rightDir, truckDir == 2)
nonBlurryEyeRiv <- rbind(leftDirxTrueL, rightDirxTrueR)
#nonBlurry
nonBlurryEyeRiv$rivDir <- as.factor(as.vector(
matrix("nonBlurryEye", nrow = length(nonBlurryEyeRiv$subject))))
#decode when seeing blurry eye
leftDirxTrueR <- subset(leftDir, truckDir == 2)
rightDirxTrueL <- subset(rightDir, truckDir == 1)
blurryEyeRiv <- rbind(leftDirxTrueR, rightDirxTrueL)
#blurryEye
blurryEyeRiv$rivDir <-
as.vector(matrix("blurryEye", nrow = length(blurryEyeRiv$subject)))
blurryEyeRiv$rivDir <- as.factor(blurryEyeRiv$rivDir)
preXpostAdapt <- rbind(nonBlurryEyeRiv, blurryEyeRiv, mixDir)
preXpostAdapt$subject <- as.factor(preXpostAdapt$subject)
preXpostAdapt$phase <- as.factor(preXpostAdapt$phase)
##calculate time spent seeing each eye after each button press
#break apart for timing analysis
preAdapt <- subset(preXpostAdapt, phase == "preAdapt")
preAdapt <- preAdapt[order(preAdapt$rt), ]
postAdapt <- subset(preXpostAdapt, phase == "postAdapt")
postAdapt <- postAdapt[order(postAdapt$rt), ]
if (length(preAdapt$subject)!=0) {
occurrencePre <- replicate(length(preAdapt$rivDir), 0)
for (i in 1:length(preAdapt$rt)) {
occurrencePre[i] = preAdapt$rt[i + 1] - preAdapt$rt[i]
if (i == length(preAdapt$rt)) {
occurrencePre[i] = round(preAdapt$rt[i], digits = -2) - preAdapt$rt[i]
}
}
preAdapt$durationOnEye <- occurrencePre
#get porportion of time spent on each eye every minute
all <-
c(seq(0, round(
tail(preAdapt$rt, n = 1), digits = -2
), by = 60))
if (tail(preAdapt$rt, n = 1) > tail(all,n=1)){
newVal <-tail(all,n=1)+60
all<-append(all,newVal)
}
preAdapt <- subset(preAdapt, rt < 600)
beTrack = replicate(length(all) - 1, 0)
pct_be = replicate(length(all) - 1, 0)
nbeTrack = replicate(length(all) - 1, 0)
pct_nbe = replicate(length(all) - 1, 0)
mixTrack = replicate(length(all) - 1, 0)
pct_mix = replicate(length(all) - 1, 0)
for (j in 1:(length(preAdapt$rt))) {
for (i in 1:length(all))
{
if (preAdapt$rt[j] >= all[i] &
preAdapt$rt[j] < all[i + 1])
{
if (preAdapt$rivDir[j] == "blurryEye")
{
beTrack[i] <- beTrack[i] + preAdapt$durationOnEye[j]
pct_be[i] <- beTrack[i] / 60
}
else if (preAdapt$rivDir[j] == "nonBlurryEye")
{
nbeTrack[i] <- nbeTrack[i] + preAdapt$durationOnEye[j]
pct_nbe[i] <- nbeTrack[i] / 60
}
else if (preAdapt$rivDir[j] == "mix")
{
mixTrack[i] <- mixTrack[i] + preAdapt$durationOnEye[j]
pct_mix[i] <- mixTrack[i] / 60
}
}
}
}
timePoints <-
c(seq(60, round(
tail(preAdapt$rt, n = 1), digits = -2
), by = 60))
if (tail(preAdapt$rt, n = 1) > tail(timePoints,n=1)){
newVal <-tail(timePoints,n=1)+60
timePoints<-append(timePoints,newVal)
}
subject <-
as.vector(matrix(subjects[k], nrow = length(timePoints)))
phase <-
as.vector(matrix('preAdapt', nrow = length(timePoints)))
#create new dataframe
pctEyePre <-
data.frame(subject, phase, timePoints, pct_be, pct_nbe, pct_mix)
}
#repeat for postAdaptation data
if (length(postAdapt$subject)!=0) {
occurrencePost <- replicate(length(postAdapt$rivDir), 0)
for (i in 1:length(postAdapt$rt)) {
occurrencePost[i] = postAdapt$rt[i + 1] - postAdapt$rt[i]
if (i == length(postAdapt$rt)) {
occurrencePost[i] = round(postAdapt$rt[i], digits = -2) - postAdapt$rt[i]
}
}
postAdapt$durationOnEye <- occurrencePost
#get porportion of time spent on each eye every minute
all <-
c(seq(0, round(
tail(postAdapt$rt, n = 1), digits = -2
), by = 60))
postAdapt <- subset(postAdapt, rt < 600)
if (tail(postAdapt$rt, n = 1) > tail(all,n=1)){
newVal <-tail(all,n=1)+60
all<-append(all,newVal)
}
beTrackPost = replicate(length(all) - 1, 0)
pct_bePost = replicate(length(all) - 1, 0)
nbeTrackPost = replicate(length(all) - 1, 0)
pct_nbePost = replicate(length(all) - 1, 0)
mixTrackPost = replicate(length(all) - 1, 0)
pct_mixPost = replicate(length(all) - 1, 0)
postAdapt <- subset(postAdapt, rt < 600)
for (j in 1:(length(postAdapt$rt))) {
for (i in 1:length(all))
{
if (postAdapt$rt[j] >= all[i] &
postAdapt$rt[j] < all[i + 1])
{
if (postAdapt$rivDir[j] == "blurryEye")
{
beTrackPost[i] <- beTrackPost[i] + postAdapt$durationOnEye[j]
pct_bePost[i] <- beTrackPost[i] / 60
}
else if (postAdapt$rivDir[j] == "nonBlurryEye")
{
nbeTrackPost[i] <- nbeTrackPost[i] + postAdapt$durationOnEye[j]
pct_nbePost[i] <- nbeTrackPost[i] / 60
}
else if (postAdapt$rivDir[j] == "mix")
{
mixTrackPost[i] <- mixTrackPost[i] + postAdapt$durationOnEye[j]
pct_mixPost[i] <- mixTrackPost[i] / 60
}
}
}
}
timePoints <-
c(seq(60, round(
tail(postAdapt$rt, n = 1), digits = -2
), by = 60))
if (tail(postAdapt$rt, n = 1) > tail(timePoints,n=1)){
newVal <-tail(timePoints,n=1)+60
timePoints<-append(timePoints,newVal)
}
subject <-
as.vector(matrix(subjects[k], nrow = length(timePoints)))
phase <-
as.vector(matrix('postAdapt', nrow = length(timePoints)))
#create new dataframe
pctEyePost <-
data.frame(subject,
phase,
timePoints,
pct_bePost,
pct_nbePost,
pct_mixPost)
colnames(pctEyePost) <-
c("subject",
"phase",
"timePoints",
"pct_be",
"pct_nbe",
"pct_mix")
}
if ((exists("pctEyePre")) & (exists("pctEyePost"))){
preXpostTimePoints <- rbind(pctEyePre, pctEyePost)
preXpostAdapt <- rbind(preAdapt, postAdapt)
}
if (exists("pctEyePre")) {
preXpostTimePoints <- pctEyePre
preXpostAdapt <- preAdapt
}else if (exists("pctEyePost")) {
preXpostTimePoints <- pctEyePost
preXpostAdapt <- postAdapt
}
write.csv(preXpostAdapt, paste0('preXpostAdapt_', subjects[k], '.csv'))
write.csv(preXpostTimePoints,
paste0('preXpostTimePoints_', subjects[k], '.csv'))
}
#load necessary libraries
library(rmatio)
library(dplyr)
library(tidyr)
library(plyr)
library(ggplot2)
library(gridExtra)
library(readr)
library(directlabels)
library(psycho)
library(reshape2)
#clear out current environment
rm(list = ls(all.names = TRUE))
####Analyze adaptation data####
#read in files
temp <- list.files(pattern="*SupDat_")
temp <-ldply(temp, read_csv)
temp$X1 <- NULL
#temp<- dplyr::filter(temp, rt > 0) #filter out rt less than start time
temp<- dplyr::filter(temp, subject != "Sub001_day2noBlur")
#divide into separate dataframes
blurryEye<-subset(temp, decEye == deprivedEye)
nonBlurryEye<-subset(temp, decEye != deprivedEye)
gg<- ggplot(data=nonBlurryEye, aes(x=rt,y=depths)) +
geom_point(aes(color = subject)) + geom_line(aes(color = subject))+ ylim(0,1)
gg<- gg+ labs(x = "time (s)",y = "decrement depth(contrast) 0=full contrast", title =
"Non-Blurry Eye Performance")
gg<- gg+facet_grid(. ~subject)
gg1<- ggplot(data=blurryEye, aes(x=rt,y=depths)) +
geom_point(aes(color = subject)) + geom_line(aes(color = subject))+ ylim(0,1)
gg1<- gg1+ labs(x = "time (s)",y = "decrement depth(contrast) 0=full contrast", title =
"Blurry Eye Performance")
gg1<- gg1+facet_grid(. ~subject)
grid.arrange(gg, gg1, nrow=2)
####Analyze adaptation data####
#read in files
temp <- list.files(pattern="*SupDat_")
temp <-ldply(temp, read_csv)
temp$X1 <- NULL
#temp<- dplyr::filter(temp, rt > 0) #filter out rt less than start time
temp<- dplyr::filter(temp, subject != "Sub001_day2noBlur")
#divide into separate dataframes
blurryEye<-subset(temp, decEye == deprivedEye)
nonBlurryEye<-subset(temp, decEye != deprivedEye)
View(temp)
temp<- dplyr::filter(temp, rt > 0)
#divide into separate dataframes
blurryEye<-subset(temp, decEye == deprivedEye)
nonBlurryEye<-subset(temp, decEye != deprivedEye)
gg<- ggplot(data=nonBlurryEye, aes(x=rt,y=depths)) +
geom_point(aes(color = subject)) + geom_line(aes(color = subject))+ ylim(0,1)
gg<- gg+ labs(x = "time (s)",y = "decrement depth(contrast) 0=full contrast", title =
"Non-Blurry Eye Performance")
gg<- gg+facet_grid(. ~subject)
gg1<- ggplot(data=blurryEye, aes(x=rt,y=depths)) +
geom_point(aes(color = subject)) + geom_line(aes(color = subject))+ ylim(0,1)
gg1<- gg1+ labs(x = "time (s)",y = "decrement depth(contrast) 0=full contrast", title =
"Blurry Eye Performance")
gg1<- gg1+facet_grid(. ~subject)
grid.arrange(gg, gg1, nrow=2)
grid.arrange(gg, gg1, nrow=4)
grid.arrange(gg, gg1, nrow=4,ncol = 2)
grid.arrange(gg, gg1, nrow=1)
gg
gg1
